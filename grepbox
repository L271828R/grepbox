#!/usr/bin/python3
import os
import sys
from datetime import datetime
from collections import OrderedDict
from datetime import datetime
from config import *

def walk(path,expression, app_extentions=LEARN_EXTENSIONS):
    arr = [] 
    for path, dirnames, filenames in os.walk(path):
        for file_name in filenames:

            expression = expression.lower()
            _, extension = os.path.splitext(file_name)
            if expression in file_name.lower() and extension in app_extentions:
                s = "{}{}{}".format(os.path.basename(path),">", file_name)
                arr.append({"base": s,"path": path, "file_name": file_name})
    return arr

def save(arr, path):
    f = open(path, 'w')
    for item in arr:
        f.write(item["path"] + '|' + item["file_name"] + '\n')
    f.close()

def format_print(od_result):
    last_keys = list(od_result.keys())
    if len(last_keys) > 0:
        last_key = last_keys[-1]
    else:
        last_key = []

    template = "{:>"+str(len(str(last_key)))+"} {} > {}"
    for key in od_result:
        head, tail = od_result[key].split(">")
        print(template.format(key, head, tail))        

def look_for_book(search, DROPBOX=DROPBOX, file_type=None):
    if file_type is None:
        arr = walk(DROPBOX, search)
    else:
        arr = walk(DROPBOX, search, app_extentions=[file_type])

    save(arr, LOCATION_PATH)
    print("number of results = ", len(arr))
    od_result = OrderedDict()
    for i, item in enumerate(arr):
        od_result[i] = item["base"]
    return od_result

def open_book(search, path):
    f = open(path, 'r')
    for i, line in enumerate(f.readlines()):
        if int(search) == i:
            bookpath, name = line.split("|")
            name = name.strip()
            full_path = os.path.join(bookpath, name)
            s = "open '{}'".format(full_path)
            save_to_db(DB_LOCATION, name, bookpath)
            os.system(s)

def save_to_db(location, name, bookpath):
    s = name + "|" + bookpath + "|" + str(datetime.now())
    with open(location, 'a') as f:
        f.write(s + '\n')

def keyboardinterrupt(f):
    def inner(*args, **kwargs):
        try:
            f(*args, **kwargs)
        except KeyboardInterrupt:
            pass
    return inner

@keyboardinterrupt
def do(search, location_path, dropbox_path, file_type=None):
    start_time = datetime.now()
    if search.isdigit():
        open_book(search, location_path)
    else:
        results = look_for_book(search, dropbox_path, file_type)
        format_print(results)
    end_time = datetime.now()
    print(end_time - start_time)
    
if __name__ == '__main__':
    args = sys.argv
    if len(args) == 2:
        search = args[1]
        do(search, LOCATION_PATH, DROPBOX_LIB)
    elif len(args) == 3:
        switch = args[1]
        if switch == '-all':
            search = args[2]
            do(search, LOCATION_PATH, DROPBOX)
    elif len(args) == 4:
        switch = args[1]
        file_type  = args[2]
        search = args[3]
        do(search, LOCATION_PATH, DROPBOX, file_type=file_type)
    else:
        print("Please pass search expression grepbox booktofind, grepbox -all booktofind")



